services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - /home/ubuntu/docker_appdata/authentik/postgresql/database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env
    ports:
      - "5432:5432"
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - /home/ubuntu/docker_appdata/authentik/redis:/data
    ports:
      - "6379:6379"
#  server:
#    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6.2}
#    restart: unless-stopped
#    command: server
#    environment:
#      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
#      AUTHENTIK_REDIS__HOST: redis
#      AUTHENTIK_POSTGRESQL__HOST: postgresql
#      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
#      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
#      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
#      AUTHENTIK_REVERSE_PROXY_ADDRESSES: 127.0.0.1,10.0.0.0/8
#      AK_OUTPOSTS__PROXY__HEADER_SET__HOST: true
#      AK_OUTPOSTS__PROXY__HEADER_SET__X_FORWARDED_PROTO: true
#    volumes:
#      - /home/ubuntu/docker_appdata/authentik/media:/media
#      - /home/ubuntu/docker_appdata/authentik/custom-templates:/templates
#    env_file:
#      - .env
#    ports:
#      - "${COMPOSE_PORT_HTTP:-9000}:9000"
#      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
#    depends_on:
#      postgresql:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6.2}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/ubuntu/docker_appdata/authentik/media:/media
      - /home/ubuntu/docker_appdata/authentik/certs:/certs
      - /home/ubuntu/docker_appdata/authentik/custom-templates:/templates
    env_file:
      - .env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy

#  krb-tunnel:
##    user: "1001:1001"
#    image: alpine-ssh
#    container_name: krb-tunnel
#    volumes:
 #     - /home/ubuntu/docker_composers/authentik/ssh:/home/hadoopadmin/.ssh:rw
 #   command: /home/hadoopadmin/.ssh/entrypoint-krb.sh
 #   restart: unless-stopped

volumes:
  database:
    driver: local
  redis:
    driver: local
